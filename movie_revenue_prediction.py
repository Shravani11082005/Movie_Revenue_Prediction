# -*- coding: utf-8 -*-
"""Movie_Revenue_Prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jRdp7FuhWiUcrtfC4F1zRX3ixUVplR4H
"""

from google.colab import drive
drive.mount('/content/drive')

# Movie Revenue Prediction Project - Using Linear Regression

# âœ… Step 1: Import Libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split, GridSearchCV, cross_val_score
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.impute import SimpleImputer
from sklearn.linear_model import LinearRegression, Ridge
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score

# âœ… Step 2: Load Dataset
# Paste the copied path here
file_path = '/content/drive/MyDrive/movie revenue prediction/boxoffice.csv'
# Replace 'movie revenue prediction/boxoffice.csv' with the actual path to your file

df = pd.read_csv('/content/drive/MyDrive/movie revenue prediction/boxoffice.csv')

# ðŸ“Š Dataset Overview
df_shape = df.shape
print("\nDataset Shape (rows, columns):", df_shape)
print("\nFirst 5 rows:\n", df.head())
print("\nLast 5 rows:\n", df.tail())
print("\nInfo about dataset:\n")
df.info()
print("\nDescriptive statistics:\n", df.describe())

# ðŸ“ˆ EDA - Visualizations
sns.histplot(df['world_revenue'], bins=10, kde=True)
plt.title('Distribution of Revenue')
plt.xlabel('Revenue')
plt.ylabel('Count')
plt.show()

sns.scatterplot(x='budget', y='world_revenue', data=df)
plt.title('Budget vs Revenue')
plt.xlabel('Budget')
plt.ylabel('Revenue')
plt.show()

# âœ… Step 3: Basic Preprocessing
selected_cols = ['budget', 'opening_revenue', 'opening_theaters', 'release_days', 'world_revenue']
df = df[selected_cols]

# Drop rows with missing target
df = df.dropna(subset=['world_revenue'])

# âœ… Step 5: Define Features and Target
X = df[['budget', 'opening_revenue', 'opening_theaters', 'release_days']]
y = df['world_revenue']

# âœ… Step 6: Preprocessing Pipeline
numeric_features = ['budget', 'opening_revenue', 'opening_theaters', 'release_days']

numeric_transformer = Pipeline(steps=[
    ('imputer', SimpleImputer(strategy='median')),
    ('scaler', StandardScaler())])

preprocessor = ColumnTransformer(
    transformers=[
        ('num', numeric_transformer, numeric_features)])

# âœ… Step 7: Model Pipeline using Linear Regression
model = Pipeline(steps=[
    ('preprocessor', preprocessor),
    ('regressor', LinearRegression())])

# âœ… Step 8: Train-Test Split (Supervised Learning)
# Splitting data into training and testing sets to evaluate model generalization
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# âœ… Step 9: Train the Model
model.fit(X_train, y_train)

# âœ… Step 10: Evaluate the Model
y_pred = model.predict(X_test)
print("\nModel Performance:")
print("MAE:", mean_absolute_error(y_test, y_pred))
print("MSE:", mean_squared_error(y_test, y_pred))
print("RMSE:", np.sqrt(mean_squared_error(y_test, y_pred)))
print("R2 Score:", r2_score(y_test, y_pred))

# âœ… Step 11: Hyperparameter Tuning (Optional for Ridge Regression)
# ridge_model = Pipeline(steps=[
#     ('preprocessor', preprocessor),
#     ('regressor', Ridge())])

# param_grid = {
#     'regressor__alpha': [0.1, 1.0, 10.0, 100.0]
# }

# grid_search = GridSearchCV(ridge_model, param_grid, cv=3, scoring='r2')
# grid_search.fit(X_train, y_train)
# print("Best Params:", grid_search.best_params_)

# âœ… Step 12: Save the Model (Optional)
# import joblib
# joblib.dump(model, 'movie_revenue_lr_model.pkl')

#comparission with other model

#other model to compare

from sklearn.ensemble import RandomForestRegressor

# Create a new pipeline with the RandomForestRegressor
rf_model = Pipeline(steps=[
    ('preprocessor', preprocessor),
    ('regressor', RandomForestRegressor(n_estimators=100, random_state=42))])

# Train the model
rf_model.fit(X_train, y_train)

# Evaluate the model
y_pred_rf = rf_model.predict(X_test)
print("\nRandom Forest Model Performance:")
print("MAE:", mean_absolute_error(y_test, y_pred_rf))
print("MSE:", mean_squared_error(y_test, y_pred_rf))
print("RMSE:", np.sqrt(mean_squared_error(y_test, y_pred_rf)))
print("R2 Score:", r2_score(y_test, y_pred_rf))