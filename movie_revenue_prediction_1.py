# -*- coding: utf-8 -*-
"""movie revenue prediction 1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Uh5J2AG4K5dJOAS0xXInask8G0Bevj4f
"""

# movie_revenue_app.py

import streamlit as st
import pandas as pd
import numpy as np
import warnings

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from sklearn.pipeline import Pipeline
from sklearn.preprocessing import StandardScaler
from sklearn.impute import SimpleImputer
from sklearn.compose import ColumnTransformer
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error

warnings.filterwarnings("ignore")

# --- Page Config ---
st.set_page_config(page_title="Movie Revenue Predictor")

# --- Background Image ---
def add_bg_image():
    st.markdown(
        f"""
        <style>
        .stApp {{
            background-image: url("https://images.unsplash.com/photo-1598899134739-24c46f58c884?auto=format&fit=crop&w=1400&q=80");
            background-size: cover;
            background-position: center;
            background-repeat: no-repeat;
            background-attachment: fixed;
        }}
        .block-container {{
            background-color: rgba(255, 255, 255, 0.9);
            padding: 2rem;
            border-radius: 12px;
        }}
        </style>
        """,
        unsafe_allow_html=True
    )

add_bg_image()

# --- Title ---
st.title("üé¨ Movie Revenue Predictor")
st.markdown("Upload movie data, select features, and predict revenue using ML models.")

# --- Load Data ---
@st.cache_data
def load_data():
    df = pd.read_csv("boxoffice.csv")
    df.columns = [col.lower().strip() for col in df.columns]
    return df

df = load_data()

# --- Feature Setup ---
numeric_cols = df.select_dtypes(include=['int64', 'float64']).columns.tolist()
if 'world_revenue' in numeric_cols:
    numeric_cols.remove('world_revenue')

# ‚úÖ Prevent errors from missing defaults
default_features = [f for f in ['budget', 'opening_revenue', 'screens'] if f in numeric_cols]

# --- Feature Selection ---
st.subheader("üßÆ Feature Selection")
selected_features = st.multiselect(
    "Choose features for prediction:",
    numeric_cols,
    default=default_features
)

# --- Model Type ---
model_type = st.radio("üìå Select Model", ["Linear Regression", "Random Forest"])

if selected_features:
    df = df.dropna(subset=['world_revenue'])
    X = df[selected_features]
    y = np.log1p(df['world_revenue'])  # log-transform target

    # Split data
    X_train, X_test, y_train, y_test = train_test_split(
        X, y, test_size=0.2, random_state=42)

    # Pipeline setup
    numeric_transformer = Pipeline([
        ('imputer', SimpleImputer(strategy='median')),
        ('scaler', StandardScaler())
    ])

    preprocessor = ColumnTransformer([
        ('num', numeric_transformer, selected_features)
    ])

    if model_type == "Linear Regression":
        model = Pipeline([
            ('preprocessor', preprocessor),
            ('regressor', LinearRegression())
        ])
    else:
        model = Pipeline([
            ('preprocessor', preprocessor),
            ('regressor', RandomForestRegressor(n_estimators=150, max_depth=10, random_state=42))
        ])

    # Train model
    model.fit(X_train, y_train)
    y_pred_log = model.predict(X_test)
    y_pred = np.expm1(y_pred_log)
    y_true = np.expm1(y_test)

    # --- Evaluation ---
    st.subheader("üìà Model Evaluation")
    st.write(f"**R¬≤ Score:** {r2_score(y_true, y_pred):.4f}")
    st.write(f"**MSE:** {mean_squared_error(y_true, y_pred):,.2f}")
    st.write(f"**MAE:** {mean_absolute_error(y_true, y_pred):,.2f}")
    st.write(f"**RMSE:** {np.sqrt(mean_squared_error(y_true, y_pred)):.2f}")

    # --- Manual Input ---
    st.subheader("üìù Predict Revenue for a New Movie")
    user_input = {}
    for feature in selected_features:
        user_input[feature] = st.number_input(f"Enter {feature}", min_value=0.0, step=1000000.0)

    if st.button("Predict Revenue"):
        input_df = pd.DataFrame([user_input])
        pred_log = model.predict(input_df)[0]
        prediction = np.expm1(pred_log)
        st.success(f"üéØ Predicted World Revenue: ${prediction:,.2f}")
else:
    st.warning("‚ö†Ô∏è Please select at least one feature to proceed.")